<div class="jumbotron">
    <h1>Rover API</h1>
    <p class="lead">Technologies used here are ASP.NET WebAPI,.Net 4.5.1, C# and some HTML, CSS, 
    and JavaScript for the API documentation. Please click API from menu above to test the rover commands</p>
</div>
<div class="row">
    <div class="col-md-12">
        <h2>Introduction</h2>
        <p>The backend function of this service it to act as the core (business logic)  of the application, these are in the rover service and a helper service called positionservice</p><p>
Unit test are provided type of rover movement.

</p><p>

    The architecture is based on the onion architecture and domain driven design(DDD). One may ask what the difference is?
    Think of the the onion arhitecture as the house and DDD as the materials used to build it. This approach points to decoupled design
    with two main sections. The CORE or business logic and INFRASTRUCTURE which are the implementation details of the application.
</p><p>
    The term onion refers to tha fact that the *core* is located at the centre of the application and is surrounded by the *infrastructure*.
    In other words the dependency direction towards the core. It is abtracted to reflect the business logic it is representing, therefore in the classes,
    and methods names there are terms which are recognizable to the business. This is instead of generic computer science terms which are not domain specific.
 
</p><p>
    The infrastructure would include the UI, repositories and services used by the core. Ideally they should be replacable without affecting the core and by all means
    should not polute the core. For example Entity Framework is only one of many ORM implementations and should be in the *infrastructure* and therefore no direct references
    should be made to it in the core. Thefore if the implmementation is switched to another ORM such as Dapper the task is limited to
    ensuring that it implments the required interface.
</p>
    </div>
    
</div>
